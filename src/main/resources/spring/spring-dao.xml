<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 配置整合mybatis过程 -->
    <!-- 1:配置数据库相关参数
        properties的属性:${url}
        默认system-properties-mode="ENVIRONMENT"->表示从系统环境中去读取，把电脑名当做mysql的用户名，修改为FALLBACK之后，运行成功（也可以改jdbc.properties文件）
        同时引入两个配置文件,加逗号隔开
    -->
    <context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties" system-properties-mode="FALLBACK"/>
    <!-- 也可以这样引入配置文件 -->
<!--<bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>-->

    <!-- 也可以使用下面的方式引入多个配置文件 -->
    <!--<bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>-->

    <!-- 2:数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>

        <!-- c3p0连接池的私有属性 -->
        <property name="maxPoolSize" value="${maxActive}"/>
        <property name="minPoolSize" value="${minActive}"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="${autoCommitOnClose}"/>
        <!-- 获取连接超时时间，即最长等待时间 -->
        <property name="checkoutTimeout" value="${maxWait}"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="${acquireRetryAttempts}"/>
    </bean>

    <!-- -->
    <!-- 3:配置SQLSessionFactory对象 -->
    <bean id="sqlSesseionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBatis全局配置文件：mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描entity包，使用别名，多个包用分号隔开 org.seckill.entity.Seckill->Seckill -->
        <property name="typeAliasesPackage" value="org.seckill.entity"/>
        <!-- 扫描sql配置文件：mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 4:配置扫描DAO接口包，动态实现DAO接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory,BeanName是为了确保加载sqlSesseionFactory的时候初始化了 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSesseionFactory"/>
        <!-- 给出扫描DAO接口包 -->
        <property name="basePackage" value="org.seckill.dao"/>
    </bean>

    <!-- RedisDao，由于不是mybatis的dao，所以要单独配置 -->
    <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
        <constructor-arg index="0" value="${redis.ip}"/>
        <constructor-arg index="1" value="${redis.port}"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置基于注解的声明式事务: 默认使用注解来管理事务行为-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>